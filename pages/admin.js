import { useEffect, useState } from "react";

export default function Admin() {
  const [items, setItems] = useState([]);
  const [message, setMessage] = useState("");
  const [saving, setSaving] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    fetch("/stock/stock.json?cache_bust=" + Date.now())
      .then((res) => res.json())
      .then((data) => setItems(data))
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ stock.json:", err);
        setMessage("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
      });
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  const saveChanges = async () => {
    setSaving(true);
    setMessage("");

    try {
      const res = await fetch("/api/update-stock", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(items),
      });

      if (res.ok) {
        setMessage("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
      } else {
        const errData = await res.json();
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${errData.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"}`);
      }
    } catch (err) {
      console.error(err);
      setMessage("‚ö† –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.");
    } finally {
      setSaving(false);
    }
  };

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–∏–∫—É
  const addNewItem = () => {
    setItems([
      ...items,
      {
        title: "–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
        desc: "–û–ø–∏—Å–∞–Ω–∏–µ",
        price: "0 ‚ÇΩ",
        img: "/stock/example.jpg",
      },
    ]);
  };

  // –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
  const removeItem = (index) => {
    if (window.confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç?")) {
      setItems(items.filter((_, i) => i !== index));
    }
  };

  // –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ
  const updateField = (index, field, value) => {
    const updated = [...items];
    updated[index][field] = value;
    setItems(updated);
  };

  return (
    <div className="p-8 max-w-5xl mx-auto">
      <h1 className="text-3xl font-bold mb-6">‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>

      {message && (
        <p className="mb-6 text-sm font-medium">
          {message}
        </p>
      )}

      <button
        onClick={addNewItem}
        className="mb-6 bg-lime-500 hover:bg-lime-400 text-black px-4 py-2 rounded-lg font-semibold"
      >
        ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É
      </button>

      <div className="space-y-6">
        {items.map((item, i) => (
          <div
            key={i}
            className="p-4 border rounded-lg shadow-sm bg-white space-y-3"
          >
            <input
              value={item.title}
              onChange={(e) => updateField(i, "title", e.target.value)}
              className="w-full border px-3 py-2 rounded"
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
            />
            <textarea
              value={item.desc}
              onChange={(e) => updateField(i, "desc", e.target.value)}
              className="w-full border px-3 py-2 rounded"
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
            />
            <input
              value={item.price}
              onChange={(e) => updateField(i, "price", e.target.value)}
              className="w-full border px-3 py-2 rounded"
              placeholder="–¶–µ–Ω–∞"
            />
            <input
              value={item.img}
              onChange={(e) => updateField(i, "img", e.target.value)}
              className="w-full border px-3 py-2 rounded"
              placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            />
            <button
              onClick={() => removeItem(i)}
              className="bg-red-500 hover:bg-red-600 text-white px-4 py-1 rounded-md"
            >
              –£–¥–∞–ª–∏—Ç—å
            </button>
          </div>
        ))}
      </div>

      <button
        onClick={saveChanges}
        disabled={saving}
        className="mt-8 bg-black text-white px-6 py-3 rounded-lg font-semibold hover:bg-gray-800 transition"
      >
        üíæ {saving ? "–°–æ—Ö—Ä–∞–Ω—è–µ–º..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"}
      </button>
    </div>
  );
}
