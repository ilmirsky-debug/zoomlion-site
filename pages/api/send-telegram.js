export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).end();
  }

  const { name, phone, comment, product } = req.body;

  const message = `
üì¶ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Zoomlion*
üë§ –ò–º—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || "‚Äî"}
${product ? `üöú –¢–æ–≤–∞—Ä: ${product}` : ""}
`;

  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;
console.log("BOT TOKEN:", process.env.TELEGRAM_BOT_TOKEN ? "‚úÖ –ï—Å—Ç—å" : "‚ùå –ù–µ—Ç");
console.log("CHAT ID:", process.env.TELEGRAM_CHAT_ID ? "‚úÖ –ï—Å—Ç—å" : "‚ùå –ù–µ—Ç");


    if (!token || !chatId) {
      console.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID");
      return res.status(500).json({ error: "–ù–µ—Ç Telegram-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏" });
    }

    const tgRes = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "Markdown",
      }),
    });

    const data = await tgRes.json();

    if (data.ok) {
      return res.status(200).json({ ok: true });
    } else {
      console.error("–û—à–∏–±–∫–∞ Telegram API:", data);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ Telegram API" });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ" });
  }
}
